package com.kun.androidproject.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.kun.demo.DemoLoginModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEMO_LOGIN_MODEL".
*/
public class DemoLoginModelDao extends AbstractDao<DemoLoginModel, Long> {

    public static final String TABLENAME = "DEMO_LOGIN_MODEL";

    /**
     * Properties of entity DemoLoginModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property KeyId = new Property(0, long.class, "keyId", true, "_id");
        public final static Property Mobile = new Property(1, String.class, "mobile", false, "MOBILE");
        public final static Property Password = new Property(2, String.class, "password", false, "PASSWORD");
    }


    public DemoLoginModelDao(DaoConfig config) {
        super(config);
    }
    
    public DemoLoginModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEMO_LOGIN_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: keyId
                "\"MOBILE\" TEXT," + // 1: mobile
                "\"PASSWORD\" TEXT);"); // 2: password
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEMO_LOGIN_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DemoLoginModel entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getKeyId());
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(2, mobile);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DemoLoginModel entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getKeyId());
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(2, mobile);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public DemoLoginModel readEntity(Cursor cursor, int offset) {
        DemoLoginModel entity = new DemoLoginModel( //
            cursor.getLong(offset + 0), // keyId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // mobile
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // password
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DemoLoginModel entity, int offset) {
        entity.setKeyId(cursor.getLong(offset + 0));
        entity.setMobile(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPassword(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DemoLoginModel entity, long rowId) {
        entity.setKeyId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DemoLoginModel entity) {
        if(entity != null) {
            return entity.getKeyId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DemoLoginModel entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
